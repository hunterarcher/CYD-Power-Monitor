esphome:
  name: victron-monitor
  friendly_name: Victron BLE Monitor

esp32:
  board: esp32dev

# Enable logging
logger:
  level: DEBUG

# Enable Home Assistant API (optional - can disable if running standalone)
api:
  encryption:
    key: "32-char-encryption-key-here!!!!!"

# Enable Over-The-Air updates
ota:
  - platform: esphome
    password: "VictronMonitor2025"

# WiFi configuration
wifi:
  ssid: "YOUR_WIFI_SSID"
  password: "YOUR_WIFI_PASSWORD"

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Victron-Monitor Fallback Hotspot"
    password: "12345678"

captive_portal:

# Enable Bluetooth
esp32_ble_tracker:
  scan_parameters:
    interval: 1100ms
    window: 1100ms
    active: true

# Victron BLE components
victron_ble:
  - mac_address: c0:3b:98:39:e6:fe
    bindkey: "8e85273557314e1eb83a94843d7c6265"
    id: shunt_device
  - mac_address: e8:86:01:5d:79:38
    bindkey: "d04652f10b4c5ad5066e34e332af6919"
    id: solar_device
  # AC CHARGER device (uncomment when detected)
  # - mac_address: "XX:XX:XX:XX:XX:XX"
  #   bindkey: "YOUR_AC_CHARGER_BIND_KEY"
  #   id: ac_charger_device

# Sensors for SHUNT device
sensor:
  # SHUNT Battery Monitor sensors
  - platform: victron_ble
    victron_ble_id: shunt_device
    battery_voltage:
      name: "Battery Voltage"
      id: battery_voltage
      unit_of_measurement: "V"
      accuracy_decimals: 2
    
    battery_current:
      name: "Battery Current"
      id: battery_current
      unit_of_measurement: "A"
      accuracy_decimals: 2
    
    instantaneous_power:
      name: "Battery Power"
      id: battery_power
      unit_of_measurement: "W"
      accuracy_decimals: 0
    
    consumed_ah:
      name: "Consumed Ah"
      id: consumed_ah
      unit_of_measurement: "Ah"
      accuracy_decimals: 1
    
    state_of_charge:
      name: "State of Charge"
      id: state_of_charge
      unit_of_measurement: "%"
      accuracy_decimals: 0
    
    time_to_go:
      name: "Time to Go"
      id: time_to_go
      unit_of_measurement: "min"
      accuracy_decimals: 0

  # SOLAR Charger sensors
  - platform: victron_ble
    victron_ble_id: solar_device
    charger_voltage:
      name: "Solar Voltage"
      id: solar_voltage
      unit_of_measurement: "V"
      accuracy_decimals: 2
    
    charger_current:
      name: "Solar Current"
      id: solar_current
      unit_of_measurement: "A"
      accuracy_decimals: 2
    
    yield_today:
      name: "Solar Yield Today"
      id: solar_yield_today
      unit_of_measurement: "Wh"
      accuracy_decimals: 0
    
    pv_power:
      name: "Solar PV Power"
      id: solar_pv_power
      unit_of_measurement: "W"
      accuracy_decimals: 0

# Text sensors for device status
text_sensor:
  # SHUNT device status
  - platform: victron_ble
    victron_ble_id: shunt_device
    device_mode:
      name: "Shunt Device Mode"
      id: shunt_mode

  # SOLAR device status  
  - platform: victron_ble
    victron_ble_id: solar_device
    charger_error:
      name: "Solar Charger Error"
      id: solar_error
    
    device_mode:
      name: "Solar Device Mode" 
      id: solar_mode

# Display configuration (for future CYD integration)
# Uncomment when ready to add display
# display:
#   - platform: ili9xxx
#     model: ili9341
#     cs_pin: 15
#     dc_pin: 2
#     reset_pin: 4
#     rotation: 90
#     lambda: |-
#       it.printf(10, 10, id(font1), "Battery: %.2fV", id(battery_voltage).state);
#       it.printf(10, 30, id(font1), "Current: %.2fA", id(battery_current).state);
#       it.printf(10, 50, id(font1), "Power: %.0fW", id(battery_power).state);
#       it.printf(10, 70, id(font1), "SOC: %.0f%%", id(state_of_charge).state);
#       it.printf(10, 110, id(font1), "Solar: %.2fV", id(solar_voltage).state);
#       it.printf(10, 130, id(font1), "Solar Current: %.2fA", id(solar_current).state);
#       it.printf(10, 150, id(font1), "Solar Power: %.0fW", id(solar_pv_power).state);

# Font for display (uncomment when adding display)
# font:
#   - file: "gfonts://Roboto"
#     id: font1
#     size: 16

# Interval component for periodic logging (standalone mode)
interval:
  - interval: 30s
    then:
      - logger.log:
          format: "Battery: %.2fV | %.2fA | %.0fW | SOC: %.0f%% | Solar: %.2fV | %.2fA | %.0fW"
          args: ['id(battery_voltage).state', 'id(battery_current).state', 'id(battery_power).state', 'id(state_of_charge).state', 'id(solar_voltage).state', 'id(solar_current).state', 'id(solar_pv_power).state']
          level: INFO

# Web server for standalone monitoring (optional)
web_server:
  port: 80
  auth:
    username: admin
    password: admin