esphome:
  name: trailer-cyd
  friendly_name: Trailer CYD Display
  min_version: 2025.2.0

esp32:
  board: esp32dev
  framework:
    type: arduino

# ---------- Networking ----------
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: "Trailer-CYD-Setup"
    password: "cydsetup123"

captive_portal:

# Optional OTA & web UI for debugging/updates
api: {}
ota:
  - platform: esphome
    password: "TrailerCYD2025"

web_server:
  port: 80

# ---------- Logging ----------
logger:
  level: INFO

# ---------- BLE tracker ----------
esp32_ble_tracker:
  scan_parameters:
    active: false         # passive scan is enough for adverts
    interval: 320ms
    window: 30ms

# ---------- External components ----------
external_components:
  - source: github://Fabian-Schmidt/esphome-victron_ble

# ---------- Victron BLE devices ----------
victron_ble:
  - id: shunt_device
    mac_address: !secret shunt_mac
    bindkey: !secret shunt_bindkey
  - id: solar_device
    mac_address: !secret solar_mac
    bindkey: !secret solar_bindkey

# ---------- SPI & Display (for future CYD integration) ----------
# Uncomment when you get your CYD display
# spi:
#   clk_pin: GPIO18
#   mosi_pin: GPIO23
#   miso_pin: GPIO19

# output:
#   - platform: ledc
#     id: lcd_backlight
#     pin: GPIO32
#     frequency: 1000 Hz

# light:
#   - platform: monochromatic
#     name: "LCD Backlight"
#     output: lcd_backlight
#     restore_mode: ALWAYS_ON

# display:
#   - platform: ili9xxx
#     model: TFT_3_5
#     id: tft
#     cs_pin: GPIO5
#     dc_pin: GPIO27
#     reset_pin: GPIO33
#     rotation: 270
#     auto_clear_enabled: true
#     lambda: |-
#       // Trailer monitoring dashboard
#       it.fill(Color::BLACK);
#       it.printf(10, 8, id(font_title), Color::WHITE, "Trailer Monitor");
#       
#       // Battery section
#       it.printf(10, 50, id(font_header), Color::CYAN, "BATTERY");
#       it.printf(10, 80, id(font_large), Color::WHITE, "%.2fV", id(battery_voltage).state);
#       it.printf(150, 80, id(font_large), Color::WHITE, "%.2fA", id(battery_current).state);
#       it.printf(290, 80, id(font_large), Color::WHITE, "%.0f%%", id(state_of_charge).state);
#       
#       // Solar section
#       it.printf(10, 140, id(font_header), Color::GREEN, "SOLAR");
#       it.printf(10, 170, id(font_large), Color::WHITE, "%.0fW", id(solar_pv_power).state);
#       it.printf(150, 170, id(font_large), Color::WHITE, "%.2fA", id(solar_output_current).state);
#       it.printf(290, 170, id(font_medium), Color::WHITE, "%s", id(solar_state).state.c_str());
#       
#       // Status footer
#       it.printf(10, 280, id(font_small), Color::GRAY, "Uptime: %.0fs | WiFi: %.0fdBm", 
#                 id(uptime_sensor).state, id(wifi_signal_sensor).state);

# font:
#   - file: "gfonts://Roboto#700"
#     id: font_title
#     size: 24
#   - file: "gfonts://Roboto#600" 
#     id: font_header
#     size: 20
#   - file: "gfonts://Roboto#500"
#     id: font_large
#     size: 28
#   - file: "gfonts://Roboto#400"
#     id: font_medium
#     size: 18
#   - file: "gfonts://Roboto#300"
#     id: font_small
#     size: 14

# ---------- Sensors ----------
sensor:
  # SHUNT/Battery Monitor
  - platform: victron_ble
    victron_ble_id: shunt_device
    battery_voltage:
      name: "Battery Voltage"
      id: battery_voltage
      accuracy_decimals: 2
    
  - platform: victron_ble
    victron_ble_id: shunt_device
    battery_current:
      name: "Battery Current"
      id: battery_current
      accuracy_decimals: 2
    
  - platform: victron_ble
    victron_ble_id: shunt_device
    consumed_ah:
      name: "Consumed Ah"
      id: consumed_ah
      accuracy_decimals: 1
    
  - platform: victron_ble
    victron_ble_id: shunt_device
    state_of_charge:
      name: "State of Charge"
      id: state_of_charge
      accuracy_decimals: 0
    
  - platform: victron_ble
    victron_ble_id: shunt_device
    time_to_go:
      name: "Time to Go"
      id: time_to_go

  # Solar Charger
  - platform: victron_ble
    victron_ble_id: solar_device
    battery_voltage:
      name: "Solar Battery Voltage"
      id: solar_battery_voltage
      accuracy_decimals: 2
    
  - platform: victron_ble
    victron_ble_id: solar_device
    battery_current:
      name: "Solar Output Current"
      id: solar_output_current
      accuracy_decimals: 2
    
  - platform: victron_ble
    victron_ble_id: solar_device
    pv_power:
      name: "Solar PV Power"
      id: solar_pv_power
      accuracy_decimals: 0
    
  - platform: victron_ble
    victron_ble_id: solar_device
    yield_today:
      name: "Solar Yield Today"
      id: solar_yield_today
      accuracy_decimals: 0

  # System sensors
  - platform: uptime
    name: "Uptime"
    id: uptime_sensor
    update_interval: 60s

  - platform: wifi_signal
    name: "WiFi Signal"
    id: wifi_signal_sensor
    update_interval: 60s

# ---------- Text sensors ----------
text_sensor:
  - platform: victron_ble
    victron_ble_id: solar_device
    device_mode:
      name: "Solar Charger State"
      id: solar_state

# ---------- Switches ----------
switch:
  - platform: restart
    name: "Restart"

# ---------- Periodic status logging ----------
interval:
  - interval: 30s
    then:
      - logger.log:
          format: "Battery: %.2fV/%.2fA (%.0f%%) | Solar: %.0fW/%.2fA | State: %s"
          args: ['id(battery_voltage).state', 'id(battery_current).state', 'id(state_of_charge).state', 'id(solar_pv_power).state', 'id(solar_output_current).state', 'id(solar_state).state.c_str()']
          level: INFO